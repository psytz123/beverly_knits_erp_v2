# Kubernetes Deployment for Beverly Knits ERP
# Production-ready configuration with auto-scaling and monitoring

apiVersion: v1
kind: Namespace
metadata:
  name: beverly-erp

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: beverly-config
  namespace: beverly-erp
data:
  FLASK_ENV: "production"
  ENABLE_PROFILING: "false"
  CACHE_TTL: "300"
  MAX_WORKERS: "5"
  ML_CONFIDENCE_THRESHOLD: "0.85"
  DATA_PATH: "/app/data"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: beverly-secrets
  namespace: beverly-erp
type: Opaque
stringData:
  DATABASE_URL: "postgresql://beverly:BK!2024SecurePass@postgres-service:5432/beverly_erp"
  REDIS_URL: "redis://redis-service:6379/0"
  SECRET_KEY: "your-secret-key-here"
  CELERY_BROKER_URL: "redis://redis-service:6379/0"
  CELERY_RESULT_BACKEND: "redis://redis-service:6379/0"

---
# PersistentVolumeClaim for data storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: beverly-data-pvc
  namespace: beverly-erp
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: standard
  resources:
    requests:
      storage: 10Gi

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: beverly-erp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: beverly-erp
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: beverly-erp
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: beverly_erp
        - name: POSTGRES_USER
          value: beverly
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: beverly-secrets
              key: DATABASE_URL
        ports:
        - containerPort: 5432
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: standard
      resources:
        requests:
          storage: 20Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: beverly-erp
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432

---
# Main Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: beverly-app
  namespace: beverly-erp
  labels:
    app: beverly-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: beverly-app
  template:
    metadata:
      labels:
        app: beverly-app
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5006"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: beverly-app
        image: beverly-erp:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5006
          name: http
        - containerPort: 8080
          name: metrics
        env:
        - name: FLASK_APP
          value: "beverly_erp.app:create_app"
        envFrom:
        - configMapRef:
            name: beverly-config
        - secretRef:
            name: beverly-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5006
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 5006
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: beverly-data-pvc

---
# Celery Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker
  namespace: beverly-erp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: celery-worker
  template:
    metadata:
      labels:
        app: celery-worker
    spec:
      containers:
      - name: celery-worker
        image: beverly-erp:latest
        command: ["celery", "-A", "beverly_erp.celery_app:celery_app", "worker", "--loglevel=info", "--concurrency=4"]
        envFrom:
        - configMapRef:
            name: beverly-config
        - secretRef:
            name: beverly-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: beverly-data-pvc

---
# Celery Beat Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-beat
  namespace: beverly-erp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: celery-beat
  template:
    metadata:
      labels:
        app: celery-beat
    spec:
      containers:
      - name: celery-beat
        image: beverly-erp:latest
        command: ["celery", "-A", "beverly_erp.celery_app:celery_app", "beat", "--loglevel=info"]
        envFrom:
        - configMapRef:
            name: beverly-config
        - secretRef:
            name: beverly-secrets
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"

---
# Service for main application
apiVersion: v1
kind: Service
metadata:
  name: beverly-service
  namespace: beverly-erp
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: LoadBalancer
  selector:
    app: beverly-app
  ports:
  - name: http
    port: 80
    targetPort: 5006
  - name: metrics
    port: 8080
    targetPort: 8080

---
# HorizontalPodAutoscaler for main app
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: beverly-app-hpa
  namespace: beverly-erp
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: beverly-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
# HorizontalPodAutoscaler for Celery workers
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: celery-worker-hpa
  namespace: beverly-erp
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: celery-worker
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85

---
# Ingress for HTTP routing
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: beverly-ingress
  namespace: beverly-erp
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/proxy-body-size: "20m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
spec:
  tls:
  - hosts:
    - beverly-erp.example.com
    secretName: beverly-tls
  rules:
  - host: beverly-erp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: beverly-service
            port:
              number: 80

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: beverly-network-policy
  namespace: beverly-erp
spec:
  podSelector:
    matchLabels:
      app: beverly-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 5006
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80