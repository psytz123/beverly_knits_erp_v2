version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bki-postgres
    environment:
      POSTGRES_DB: beverly_knits_erp
      POSTGRES_USER: bki_admin
      POSTGRES_PASSWORD: ${DB_PASSWORD:-BK!2024SecurePass}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bki_admin -d beverly_knits_erp"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bki-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bki-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bki-network

  # Main ERP Application
  erp-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-3.0.0}
    container_name: bki-erp
    environment:
      DATABASE_URL: postgresql://bki_admin:${DB_PASSWORD:-BK!2024SecurePass}@postgres:5432/beverly_knits_erp
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      FLASK_ENV: ${FLASK_ENV:-production}
      SECRET_KEY: ${SECRET_KEY:-changeme}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-changeme}
      ADMIN_TOKEN: ${ADMIN_TOKEN:-394fb1b1de53de2ffb6c7db0b181269d1fd5c813}
      ENABLE_UNIFIED_MCP: ${ENABLE_UNIFIED_MCP:-true}
      MOCK_ERP_DATA: ${MOCK_ERP_DATA:-false}
      ML_CONFIDENCE_THRESHOLD: ${ML_CONFIDENCE_THRESHOLD:-0.85}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./cache:/app/cache
    ports:
      - "5006:5006"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - bki-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bki-celery-worker
    command: celery -A src.core.celery_app worker --loglevel=info --concurrency=4
    environment:
      DATABASE_URL: postgresql://bki_admin:${DB_PASSWORD:-BK!2024SecurePass}@postgres:5432/beverly_knits_erp
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - erp-app
    restart: unless-stopped
    networks:
      - bki-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bki-celery-beat
    command: celery -A src.core.celery_app beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://bki_admin:${DB_PASSWORD:-BK!2024SecurePass}@postgres:5432/beverly_knits_erp
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - erp-app
    restart: unless-stopped
    networks:
      - bki-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: bki-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - bki-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: bki-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource,redis-app
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - bki-network

  # Nginx Reverse Proxy (Optional for Production)
  nginx:
    image: nginx:alpine
    container_name: bki-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - erp-app
    restart: unless-stopped
    networks:
      - bki-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  bki-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16